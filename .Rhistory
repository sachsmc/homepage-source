}
rotate <- function(ang){
tthet <- (state$theta + ang)
if(tthet < 0) tthet <- 2 * pi - abs(ang)
state$theta <<- tthet %% (2 * pi)
}
branch <- function(len) {
res <- line(len)
translate(res$x, res$y)
len <- len * .66
if(len > 2){
pushState()
rotate(phi)
branch(len)
popState()
pushState()
rotate(- phi)
branch(len)
popState()
}
}
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 5.5
branch(20)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
phi <- pi / 2.5
branch(20)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
phi <- pi / 9
branch(20)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 9
branch(20)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 9
branch(20)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 3
branch(20)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
branch <- function(len) {
res <- line(len)
translate(res$x, res$y)
len <- len * .66
if(len > 2){
pushState()
rotate(phi + runif(1, 0, phi / 4))
branch(len)
popState()
pushState()
rotate(- (phi + runif(1, 0, phi / 4)))
branch(len)
popState()
}
}
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 3
branch(20)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
phi <- pi / 3
branch(200)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
branch <- function(len) {
res <- line(len)
translate(res$x, res$y)
len <- len * .66
if(len > 2){
pushState()
rotate(phi)
branch(len)
popState()
pushState()
rotate(- (phi))
branch(len)
popState()
}
}
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 3
branch(200)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
phi <- pi / 5
branch(200)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 5
branch(200)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 6
branch(100)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 7
branch(100)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
phi <- pi / 8
branch(100)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 8
branch(100)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 11
branch(100)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
library(data.table)
jth <- data.table(mtcars)
jth
?data.table
jth[, lapply(.SD, median), by = .(cyl, vs), .SDcols = 3:6]
jth[, lapply(.SD, median), by = .(cyl, am), .SDcols = 3:6]
library(ggplot2)
line <- function(len) {
if(state$theta < pi / 2) {
x2 <- state$x + len * cos(state$theta)
y2 <- state$y + len * sin(state$theta)
} else if(state$theta > pi / 2 & state$theta < pi) {
x2 <- state$x - len * cos(pi - state$theta)
y2 <- state$y + len * sin(pi - state$theta)
} else if(state$theta > pi & state$theta < 3 * pi / 2) {
x2 <- state$x - len * sin((3 * pi / 2) - state$theta)
y2 <- state$y - len * cos((3 * pi / 2) - state$theta)
} else {
x2 <- state$x + len * cos(2 * pi - state$theta)
y2 <- state$y - len * sin(2 * pi - state$theta)
}
draw <<- rbind(draw, c(x1 = state$x, y1 = state$y,
x2 = x2,
y2 = y2))
list(x = x2, y = y2)
}
pushState <- function() stack <<- rbind(stack, state)
popState <- function(){
state <<- stack[nrow(stack), ]
stack <<- stack[-nrow(stack),]
}
translate <- function(x2, y2) {
state$x <<- x2
state$y <<- y2
}
rotate <- function(ang){
tthet <- (state$theta + ang)
if(tthet < 0) tthet <- 2 * pi - abs(ang)
state$theta <<- tthet %% (2 * pi)
}
branch <- function(len) {
res <- line(len)
translate(res$x, res$y)
len <- len * .66
if(len > 2){
pushState()
rotate(phi)
branch(len)
popState()
pushState()
rotate(- (phi))
branch(len)
popState()
}
}
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.0)
stack <- data.frame(state)[-1,]
phi <- pi / 11
branch(100)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.25)
stack <- data.frame(state)[-1,]
phi <- pi / 11
branch(100)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = 0.90)
stack <- data.frame(state)[-1,]
phi <- pi / 11
branch(100)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
draw <- data.frame(x1 = 0, y1 = 0, x2 = 0, y2 = 0)
state <- list(x = 0, y = 0, theta = pi * .5)
stack <- data.frame(state)[-1,]
phi <- pi / 11
branch(100)
ggplot((draw), aes(x = x1, y = y1, xend = x2, yend = y2)) + geom_segment(alpha = 1)
library(DPpackage)
library(DPpackagemod)
install.packages("DPpackage")
library(DPpackage)
?DPcdensity
nobs <- 500
x <- rnorm(nobs)
x2 <- rbinom(nobs, 1, .5)
y1 <- 1 * x + rnorm(nobs, 0, sqrt(0.1))
y2 <- -1 * x + rnorm(nobs, 0, sqrt(0.1))
y <- ifelse(x2 == 1,y1,y2)
# Prior information
w <- cbind(y,x,x2)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0=10,
b0=1,
nu1=4,
nu2=4,
s2=0.5*wcov,
m2=wbar,
psiinv2=2*solve(wcov),
tau1=6.01,
tau2=2.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
xxx <- seq(-2,2,by = .1)
xpred1 <- rbind(cbind(xxx, 1), cbind(xxx, 0))
fitLDDP <- DPcdensity(y = y, x = cbind(x, x2), mus=w, sds=ses, xpred = xpred1,
grid=mygrid,
compute.band=TRUE,
type.band="HPD",
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
fitLDDP <- DPcdensity(y = y, x = cbind(x, x2), xpred = xpred1,
grid=mygrid,
compute.band=TRUE,
type.band="HPD",
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
fitLDDP <- DPcdensity(y = y, x = cbind(x, x2), xpred = xpred1,
compute.band=FALSE,
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
wcov
prior <- list(a0=10,
b0=1,
nu1=8,
nu2=8,
s2=0.5*wcov,
m2=wbar,
psiinv2=2*solve(wcov),
tau1=6.01,
tau2=2.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
xxx <- seq(-2,2,by = .1)
xpred1 <- rbind(cbind(xxx, 1), cbind(xxx, 0))
fitLDDP <- DPcdensity(y = y, x = cbind(x, x2), xpred = xpred1,
compute.band=FALSE,
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
prior <- list(a0=10,
b0=1,
nu1=12,
nu2=12,
s2=0.5*wcov,
m2=wbar,
psiinv2=2*solve(wcov),
tau1=6.01,
tau2=2.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
xxx <- seq(-2,2,by = .1)
xpred1 <- rbind(cbind(xxx, 1), cbind(xxx, 0))
fitLDDP <- DPcdensity(y = y, x = cbind(x, x2), xpred = xpred1,
compute.band=FALSE,
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
yhat <- fitLDDP$meanfp.m
prior <- list(a0=10,
b0=1,
nu1=12,
nu2=12,
s2=0.5*wcov,
m2=wbar,
psiinv2=4*solve(wcov),
tau1=16.01,
tau2=12.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
xxx <- seq(-2,2,by = .1)
xpred1 <- rbind(cbind(xxx, 1), cbind(xxx, 0))
fitLDDP <- DPcdensity(y = y, x = cbind(x, x2), xpred = xpred1,
compute.band=FALSE,
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
yhat <- fitLDDP$meanfp.m
nobs <- 500
x <- rnorm(nobs)
x2 <- runif(nobs)
y <- x2 * xrnorm(nobs, 0, sqrt(0.1))
# Prior information
w <- cbind(y,x,x2)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0=10,
b0=1,
nu1=12,
nu2=12,
s2=0.5*wcov,
m2=wbar,
psiinv2=4*solve(wcov),
tau1=16.01,
tau2=12.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=5000,
nskip=3,
ndisplay=100)
xxx <- seq(-2,2,by = .1)
xpred1 <- rbind(cbind(xxx, 1), cbind(xxx, 0))
fitLDDP <- DPcdensity(y = y, x = cbind(x, x2), xpred = xpred1,
compute.band=FALSE,
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
nobs <- 50
x <- rnorm(nobs)
x2 <- runif(nobs)
y <- x2 * xrnorm(nobs, 0, sqrt(0.1))
# Prior information
w <- cbind(y,x,x2)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0=10,
b0=1,
nu1=12,
nu2=12,
s2=0.5*wcov,
m2=wbar,
psiinv2=4*solve(wcov),
tau1=16.01,
tau2=12.01)
# Initial state
state <- NULL
# MCMC parameters
curve(dbeta(x, 5, 5))
curve(dbeta(x, .5, .5))
nobs <- 50
x <- rnorm(nobs)
x2 <- rbeta(nobs, .4, .4)
y <- x2 * x + rnorm(nobs, 0, sqrt(0.1))
# Prior information
w <- cbind(y,x,x2)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0=10,
b0=1,
nu1=12,
nu2=12,
s2=0.5*wcov,
m2=wbar,
psiinv2=4*solve(wcov),
tau1=16.01,
tau2=12.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=1000,
nskip=3,
ndisplay=100)
xxx <- seq(-2,2,by = .1)
xpred1 <- rbind(cbind(xxx, 1), cbind(xxx, 0))
fitLDDP <- DPcdensity(y = y, x = cbind(x, x2), xpred = xpred1,
compute.band=FALSE,
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
xpred1
plot(y ~ x)
nobs <- 50
x <- rnorm(nobs)
x2 <- rbeta(nobs, .4, .4)
y <- x - 2 * x * x2 + rnorm(nobs, 0, sqrt(0.1))
# Prior information
w <- cbind(y,x,x2)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0=10,
b0=1,
nu1=12,
nu2=12,
s2=0.5*wcov,
m2=wbar,
psiinv2=4*solve(wcov),
tau1=16.01,
tau2=12.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=1000,
nskip=3,
ndisplay=100)
xxx <- seq(-2,2,by = .1)
xpred1 <- rbind(cbind(xxx, 1), cbind(xxx, 0))
plot(y ~ x)
plot(y ~ x, pch = 20, col = ifelse(x2 < .5, "blue", "red"))
# Prior information
w <- cbind(y,x,x2)
wbar <- apply(w,2,mean)
wcov <- var(w)
prior <- list(a0=10,
b0=1,
nu1=12,
nu2=12,
s2=0.5*wcov,
m2=wbar,
psiinv2=4*solve(wcov),
tau1=16.01,
tau2=12.01)
# Initial state
state <- NULL
# MCMC parameters
mcmc <- list(nburn=5000,
nsave=1000,
nskip=3,
ndisplay=100)
xxx <- seq(-2,2,by = .1)
xpred1 <- rbind(cbind(xxx, 1), cbind(xxx, 0))
fitLDDP <- DPcdensity(y = y, x = cbind(x, x2), xpred = xpred1,
compute.band=FALSE,
prior=prior,
mcmc=mcmc,
state=NULL,
status=TRUE)
yhat <- fitLDDP$meanfp.m
plot(y ~ x, pch = 20, col = ifelse(x2 < .5, "blue", "red"))
lines(yhat[1:41] ~ xxx, type = "l", col = "blue")
lines(yhat[42:82] ~ xxx, type = "l", col = "red")
plot(y ~ x, pch = 20, col = ifelse(x2 < .5, "blue", "red"))
lines(yhat[1:41] ~ xxx, type = "l", col = "red")
lines(yhat[42:82] ~ xxx, type = "l", col = "blue")
library(exact2x2)
install.packages("exact2x2")
library(exact2x2)
?`exact2x2-package`
binomMeld.test(264, 26067, 84, 30055, parmtype = "ratio")
binomMeld.test(84, 30055,264, 26067,  parmtype = "ratio")
tt <- binomMeld.test(264, 26067, 84, 30055, parmtype = "ratio")
tt
1 - tt$statistic
1 - tt$estimate
1 - tt$conf.int
setwd("~/Downloads/homepage/content/post")
setwd("../..")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
